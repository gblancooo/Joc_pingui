package modelo;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Random;

public class Tablero {

    public static final int NUM_CASILLAS = 50;

   public List<Casilla> casillas;

    public Tablero() {
        casillas = new ArrayList<>();
        generarCasillasAleatorias();
    }

    private void generarCasillasAleatorias() {
        Random rnd = new Random();

        // 1. Inicialmente todas NORMAL
        for (int i = 0; i < NUM_CASILLAS; i++) {
            casillas.add(new CasillaNormal(i));
        }

        // 2. Límites para tipos especiales
        int numOsos = 5;
        int numAgujeros = 5;
        int numTrineos = 4;
        int numInterrogants = 6;
        int numQuebradizos = 5;  // número de casillas Suelo Quebradizo

        // 3. Asignar tipos en posiciones aleatorias
        assignarTipoAleatorio("OSO", numOsos, rnd);
        assignarTipoAleatorio("AGUJERO", numAgujeros, rnd);
        assignarTipoAleatorio("TRINEO", numTrineos, rnd);
        assignarTipoAleatorio("INTERROGANTE", numInterrogants, rnd);
        assignarTipoAleatorio("SUELO_QUEBRADIZO", numQuebradizos, rnd);
    }

    private void assignarTipoAleatorio(String tipo, int cantidad, Random rnd) {
        int asignados = 0;
        while (asignados < cantidad) {
            int pos = rnd.nextInt(NUM_CASILLAS);

            // Evitar posición 0 (inicio) y última, y no sobreescribir no normales
            if (pos == 0 || pos == NUM_CASILLAS - 1) continue;
            Casilla actual = casillas.get(pos);
            if (!actual.getTipo().equals("NORMAL")) continue;

            // Instanciar la casilla según su tipo
            switch (tipo) {
                case "OSO":
                    casillas.set(pos, new Oso(pos));
                    break;
                case "AGUJERO":
                    casillas.set(pos, new Agujero(pos));
                    break;
                case "TRINEO":
                    casillas.set(pos, new Trineo(pos));
                    break;
                case "INTERROGANTE":
                    casillas.set(pos, new Interrogant(pos));
                    break;
                case "SUELO_QUEBRADIZO":
                    casillas.set(pos, new SueloQuebradizo(pos));
                    break;
                default:
                    // mantener normal si no coincide
                    casillas.set(pos, new CasillaNormal(pos));
            }

            asignados++;
        }
    }

    public Casilla getCasilla(int index) {
        if (index < 0) index = 0;
        if (index >= NUM_CASILLAS) index = NUM_CASILLAS - 1;
        return casillas.get(index);
    }

    public List<Casilla> getCasillas() {
        return Collections.unmodifiableList(casillas);
    }
}
