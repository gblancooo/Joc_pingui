package controlador;

import modelo.Jugador;
import modelo.Casilla;
import java.util.List;

/**
 * Controla el flujo de la partida y la persistencia.
 */
public class gestorPartidas {
    private static gestorTablero tablero;
    private final List<Jugador> jugadores;
    private int turnoActual;

    public gestorPartidas(gestorTablero t, List<Jugador> js) {
        tablero = t;
        this.jugadores = js;
        this.turnoActual = 0;
        // Añadir cada jugador a la casilla 0
        for (Jugador j : jugadores) {
            tablero.getCasillas().get(0).añadirJugador(j);
            j.setPosicion(0);
        }
    }

    /** Permite usar desde Jugador para obtener el tablero */
    public static gestorTablero getTablero() {
        return tablero;
    }

    public List<Jugador> getJugadores() {
        return jugadores;
    }

    public int getTurnoActual() {
        return turnoActual;
    }

    /** Ejecuta un turno: dado normal, mover y activar casilla */
    public void jugarTurno() {
        Jugador j = jugadores.get(turnoActual);
        int pasos = tirarDado();
        avanzarJugador(j, pasos);
        turnoActual = (turnoActual + 1) % jugadores.size();
        // Aquí podrías serializar en BBDD...
    }

    public int tirarDado() {
        return (int)(Math.random() * 6) + 1;
    }

    public void avanzarJugador(Jugador j, int pasos) {
        int actual = j.getPosicion(); 
        int destino = actual + pasos;
        int max = tablero.getCasillas().size() - 1;
        if (destino > max) destino = max;

        tablero.getCasillas().get(actual).quitarJugador(j);
        j.setPosicion(destino);
        Casilla cas = tablero.getCasillas().get(destino);
        cas.añadirJugador(j);
        cas.realizarAccion(j, this);
    }
}
