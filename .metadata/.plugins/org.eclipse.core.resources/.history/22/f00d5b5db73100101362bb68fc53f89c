package vista;

import controlador.gestorTablero;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.geometry.HPos;
import javafx.scene.control.MenuItem;
import javafx.scene.control.Button;
import javafx.scene.layout.GridPane;
import javafx.scene.shape.Circle;
import javafx.scene.text.Text;
import modelo.Casilla;
import modelo.Evento;
import modelo.Jugador;
import modelo.Tablero;

import java.util.List;
import java.util.Random;

public class pantallaJuegoController {

    @FXML private MenuItem newGame;
    @FXML private MenuItem saveGame;
    @FXML private MenuItem loadGame;
    @FXML private MenuItem quitGame;

    @FXML private GridPane tablero;
    @FXML private Circle P1, P2, P3, P4;

    @FXML private Text dadoResultText;
    @FXML private Button dado;
    @FXML private Text rapido_t, lento_t, peces_t, nieve_t;
    @FXML private Button rapido, lento, peces, nieve;
    @FXML private Text eventos;

    private List<Jugador> jugadores;
    private Jugador jugadorActual;
    private int turnoActual = 0;
    private gestorTablero gestorTablero;
    private Random rnd = new Random();

    public void initialize() {
        gestorTablero = new gestorTablero();

        // Situa les fitxes a la posici√≥ inicial (0)
        moverFicha(P1, 0);
        moverFicha(P2, 0);
        moverFicha(P3, 0);
        moverFicha(P4, 0);
    }

    public void setJugadores(List<Jugador> jugadores) {
        this.jugadores = jugadores;
        this.turnoActual = 0;
        this.jugadorActual = jugadores.get(0);
        dibujarTablero();
        actualizarVista();
    }

    private void dibujarTablero() {
        tablero.getChildren().clear();
        int cols = 5;

        for (int i = 0; i < Tablero.NUM_CASILLAS; i++) {
            int row = i / cols;
            int col = i % cols;

            Casilla casilla = gestorTablero.getTablero().getCasilla(i);
            String tipo = casilla.getTipo();

            String simbolo = switch (tipo) {
                case "OSO"          -> "üêª";
                case "AGUJERO"      -> "üï≥Ô∏è";
                case "TRINEO"       -> "üõ∑";
                case "INTERROGANTE" -> "‚ùì";
                default             -> String.valueOf(i);
            };

            Text txt = new Text(simbolo);
            txt.setStyle("-fx-font-size: 24;");
            GridPane.setHalignment(txt, HPos.CENTER);
            tablero.add(txt, col, row);

            // Color de fondo seg√∫n tipo
            String color = switch (tipo) {
                case "OSO"          -> "#ffcccc"; // rojo claro
                case "AGUJERO"      -> "#ccffff"; // azul claro
                case "TRINEO"       -> "#ccffcc"; // verde claro
                case "INTERROGANTE" -> "#ffffcc"; // amarillo claro
                default             -> "#eeeeee"; // gris claro
            };

            // Crea una celda de fondo para colorear
            javafx.scene.layout.Region fondo = new javafx.scene.layout.Region();
            fondo.setStyle("-fx-background-color: " + color + "; -fx-border-color: black;");
            fondo.setMinSize(50, 50);
            GridPane.setRowIndex(fondo, row);
            GridPane.setColumnIndex(fondo, col);
            tablero.getChildren().add(fondo);

            // Trae el texto al frente
            GridPane.setRowIndex(txt, row);
            GridPane.setColumnIndex(txt, col);
        }

        // A√±ade las fichas encima del tablero
        tablero.getChildren().addAll(P1, P2, P3, P4);
    }


    private void moverFicha(Circle ficha, int posicion) {
        int cols = 5;
        int row = posicion / cols;
        int col = posicion % cols;
        GridPane.setRowIndex(ficha, row);
        GridPane.setColumnIndex(ficha, col);
    }

    private void actualizarVista() {
        rapido_t.setText("Dado r√°pido: " + jugadorActual.getInventario().getDados());
        lento_t .setText("Dado lento: "  + jugadorActual.getInventario().getDados());
        peces_t .setText("Peces: "        + jugadorActual.getInventario().getPeces());
        nieve_t .setText("Bolas de nieve: "+ jugadorActual.getInventario().getBolasNieve());

        rapido.setDisable(jugadorActual.getInventario().getDados() == 0);
        lento .setDisable(jugadorActual.getInventario().getDados() == 0);
        peces .setDisable(jugadorActual.getInventario().getPeces() == 0);
        nieve .setDisable(jugadorActual.getInventario().getBolasNieve() == 0);

        for (int i = 0; i < jugadores.size(); i++) {
            Circle ficha = (i == 0 ? P1 : i == 1 ? P2 : i == 2 ? P3 : P4);
            moverFicha(ficha, jugadores.get(i).getPosicion());
        }
    }

    private void procesarMovimiento(int pasos) {
        jugadorActual.mover(pasos);
        Casilla cas = gestorTablero.getTablero().getCasilla(jugadorActual.getPosicion());
        switch (cas.getTipo()) {
            case "OSO":
                if (!jugadorActual.getInventario().usarPez()) {
                    jugadorActual.setPosicion(0);
                }
                eventos.setText("Ha ca√≠do en OSO");
                break;
            case "AGUJERO":
                int pos = jugadorActual.getPosicion();
                for (int i = pos - 1; i >= 0; i--) {
                    if (gestorTablero.getTablero().getCasilla(i).getTipo().equals("AGUJERO")) {
                        jugadorActual.setPosicion(i);
                        break;
                    }
                }
                eventos.setText("Ha ca√≠do en AGUJERO");
                break;
            case "TRINEO":
                pos = jugadorActual.getPosicion();
                for (int i = pos + 1; i < Tablero.NUM_CASILLAS; i++) {
                    if (gestorTablero.getTablero().getCasilla(i).getTipo().equals("TRINEO")) {
                        jugadorActual.setPosicion(i);
                        break;
                    }
                }
                eventos.setText("Ha usado TRINEO");
                break;
            case "INTERROGANTE":
                Evento.activarEvento(jugadorActual);
                eventos.setText("Evento aleatorio activado");
                break;
            default:
                eventos.setText("");
        }

        dadoResultText.setText("Ha salido: " + pasos);
        actualizarVista(); // <- Actualitzem vista despr√©s de moure
    }

    private void siguienteTurno() {
        turnoActual = (turnoActual + 1) % jugadores.size();
        jugadorActual = jugadores.get(turnoActual);
        actualizarVista();
    }

    @FXML private void handleNewGame(ActionEvent e)  { /* ... */ }
    @FXML private void handleSaveGame(ActionEvent e) { /* ... */ }
    @FXML private void handleLoadGame(ActionEvent e) { /* ... */ }
    @FXML private void handleQuitGame(ActionEvent e) { System.exit(0); }

    @FXML
    private void handleDado(ActionEvent e) {
        int tirada = rnd.nextInt(6) + 1;
        procesarMovimiento(tirada);
        siguienteTurno();
    }

    @FXML
    private void handleRapido(ActionEvent e) {
        if (jugadorActual.getInventario().usarDado()) {
            int tirada = 5 + rnd.nextInt(6);
            procesarMovimiento(tirada);
            siguienteTurno();
        }
    }

    @FXML
    private void handleLento(ActionEvent e) {
        if (jugadorActual.getInventario().usarDado()) {
            int tirada = 1 + rnd.nextInt(3);
            procesarMovimiento(tirada);
            siguienteTurno();
        }
    }

    @FXML
    private void handlePeces(ActionEvent e) {
        // opcional: suborno a l‚Äô√≥s
    }

    @FXML
    private void handleNieve(ActionEvent e) {
        if (jugadorActual.getInventario().usarBola()) {
            int victima = (turnoActual + 1) % jugadores.size();
            jugadores.get(victima).mover(-1);
            siguienteTurno();
        }
    }
}
