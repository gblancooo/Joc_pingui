package vista;

import controlador.gestorPartidas;
import javafx.fxml.FXML;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.layout.GridPane;
import modelo.Agujero;
import modelo.Casilla;
import modelo.Interrogant;
import modelo.Oso;
import modelo.Trineo;

import java.util.List;

public class pantallaJuegoController {

    @FXML private GridPane tablero;
    @FXML private Button btnTirarDado;
    @FXML private Button btnBolaNieve;

    private gestorPartidas gp;

    /** Llamar desde main tras cargar el FXML */
    public void setGestorPartidas(gestorPartidas gp) {
        this.gp = gp;
        drawBoard();
        setupActions();
    }

    /** Dibuja las 50 casillas con su tipo en el GridPane */
    private void drawBoard() {
        // Limpia cualquier nodo previo
        tablero.getChildren().clear();

        List<Casilla> casillas = gp.getTablero().getCasillas();
        int cols = 5;
        for (int i = 0; i < casillas.size(); i++) {
            int row = i / cols;
            int col = i % cols;
            Casilla c = casillas.get(i);

            Label lbl = new Label();
            lbl.setMaxSize(Double.MAX_VALUE, Double.MAX_VALUE);
            lbl.setStyle("-fx-alignment: center; -fx-font-size: 14;");

            if (c instanceof Oso) {
                lbl.setText("Ós");
            } else if (c instanceof Agujero) {
                lbl.setText("Forat");
            } else if (c instanceof Trineo) {
                lbl.setText("Trineu");
            } else if (c instanceof Interrogant) {
                lbl.setText("?");
            } else {
                // CasillaNormal o genérica
                lbl.setText("");
            }
            // Añade al GridPane
            tablero.add(lbl, col, row);
        }
        // Opcional: después podrías dibujar aquí los jugadores
    }

    /** Configura eventos de botones del turno */
    private void setupActions() {
        btnTirarDado.setOnAction(e -> {
            gp.jugarTurno();
            drawBoard();       // para actualizar posibles movimientos
            // aquí podrías refrescar inventario, posiciones de jugadores, etc.
        });

        btnBolaNieve.setOnAction(e -> {
            // Lógica de lanzar bola de nieve, p.ej.:
            // gp.lanzarBola(neveTarget);
            drawBoard();
        });
    }

	public void setNumeroJugadores(int num) {
		// TODO Auto-generated method stub
		
	}
}
