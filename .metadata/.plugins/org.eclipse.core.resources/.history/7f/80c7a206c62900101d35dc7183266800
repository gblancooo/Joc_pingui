package vista;

import controlador.gestorPartidas;
import controlador.gestorTablero;
import javafx.fxml.FXML;
import javafx.scene.control.Button;
import javafx.scene.control.MenuItem;
import javafx.scene.control.ScrollPane;
import javafx.scene.layout.GridPane;
import javafx.scene.shape.Circle;
import javafx.scene.text.Text;
import modelo.Casilla;
import modelo.Agujero;
import modelo.Interrogant;
import modelo.Oso;
import modelo.Trineo;
import modelo.Jugador;
import modelo.Pinguino;

import java.util.ArrayList;
import java.util.List;

public class pantallaJuegoController {

    @FXML private MenuItem newGame, saveGame, loadGame, quitGame;
    @FXML private GridPane tablero;
    @FXML private Text eventos, rapido_t, lento_t, peces_t, nieve_t, dadoResultText;
    @FXML private ScrollPane scrollPane;           // si necesitas
    @FXML private Button dado, rapido, lento, peces, nieve;
    @FXML private Circle P1, P2, P3, P4;

    private gestorPartidas gestor;
    private int numeroJugadores;

    /** Llamado tras cargar FXML desde selección */
    public void initGame(int numJugadores, gestorPartidas gp) {
        this.numeroJugadores = numJugadores;
        this.gestor = gp;
        drawBoard();
        initPlayersOnBoard();
        updateInventoryDisplay();
    }

    /** Dibuja etiquetas de casillas en el GridPane */
    private void drawBoard() {
        tablero.getChildren().removeIf(node -> node instanceof Text && ((Text)node).getText().matches("Ós|Forat|Trineu|\\?"));
        List<Casilla> casillas = gestor.getTablero().getCasillas();
        int cols = 5;
        for (int i = 0; i < casillas.size(); i++) {
            int row = i / cols, col = i % cols;
            Casilla c = casillas.get(i);
            String label = "";
            if (c instanceof Oso)        label = "Ós";
            else if (c instanceof Agujero) label = "Forat";
            else if (c instanceof Trineo)  label = "Trineu";
            else if (c instanceof Interrogant) label = "?";
            Text t = new Text(label);
            tablero.add(t, col, row);
        }
    }

    /** Inicializa la posición de los círculos según el número de jugadores */
    private void initPlayersOnBoard() {
        P1.setVisible(true);
        P2.setVisible(numeroJugadores >= 2);
        P3.setVisible(numeroJugadores >= 3);
        P4.setVisible(numeroJugadores >= 4);

        moveCircle(P1, 0);
        if (numeroJugadores >= 2) moveCircle(P2, 0);
        if (numeroJugadores >= 3) moveCircle(P3, 0);
        if (numeroJugadores >= 4) moveCircle(P4, 0);

        // Conecta eventos de botones
        dado.setOnAction(e -> handleDado());
        rapido.setOnAction(e -> useItem("rapido"));
        lento.setOnAction(e -> useItem("lento"));
        peces.setOnAction(e -> useItem("peces"));
        nieve.setOnAction(e -> useItem("nieve"));
    }

    /** Maneja la tirada de dado via modelo */
    @FXML private void handleDado() {
        int result = gestor.tirarDado();  // implementa en gestorPartidas
        dadoResultText.setText("Ha salido: " + result);
        gestor.jugarTurno();
        int idx = gestor.getTurnoActual();
        List<Jugador> js = gestor.getJugadores();
        int pos = js.get(idx).getPosicion();
        switch (idx) {
            case 0: moveCircle(P1, pos); break;
            case 1: moveCircle(P2, pos); break;
            case 2: moveCircle(P3, pos); break;
            case 3: moveCircle(P4, pos); break;
        }
        eventos.setText("Turno Jugador " + (idx+1));
        updateInventoryDisplay();
    }

    /** Usa un ítem del inventario */
    private void useItem(String tipo) {
        // Implementa lógica: gestor.useRapido(), etc.
        // Luego refresca inventario:
        updateInventoryDisplay();
    }

    /** Actualiza los textos de inventario */
    private void updateInventoryDisplay() {
        rapido_t.setText("Dado rápido: " + gestor.getRapidos());
        lento_t.setText("Dado lento: "  + gestor.getLentos());
        peces_t.setText("Peces: "       + gestor.getPeces());
        nieve_t.setText("Bolas de nieve: " + gestor.getNieve());
    }

    /** Mueve un círculo a la casilla indicada */
    private void moveCircle(Circle c, int casillaIndex) {
        int row = casillaIndex / 5;
        int col = casillaIndex % 5;
        GridPane.setRowIndex(c, row);
        GridPane.setColumnIndex(c, col);
    }
}
