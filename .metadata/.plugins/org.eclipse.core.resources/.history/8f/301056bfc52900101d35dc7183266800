package vista;

import controlador.gestorPartidas;
import javafx.fxml.FXML;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.layout.GridPane;
import javafx.scene.shape.Circle;
import modelo.Agujero;
import modelo.Casilla;
import modelo.Interrogant;
import modelo.Oso;
import modelo.Trineo;

import java.util.List;

public class pantallaJuegoController {

    @FXML private GridPane tablero;
    @FXML private Button btnTirarDado;
    @FXML private Button btnBolaNieve;
    @FXML private Label eventos;
    @FXML private Circle P1;
    @FXML private Circle P2;
    @FXML private Circle P3;
    @FXML private Circle P4;

    private gestorPartidas gestor;
    private int numeroJugadores;
    private int currentPlayerIndex;

    /** Llamar desde pantallaSeleccionJugadoresController */
    public void setNumeroJugadores(int n) {
        this.numeroJugadores = n;
        this.currentPlayerIndex = 0;
        eventos.setText("Turno de Jugador 1");

        // Mostrar u ocultar círculos según cuántos jugadores haya
        P1.setVisible(true);
        P2.setVisible(n >= 2);
        P3.setVisible(n >= 3);
        P4.setVisible(n >= 4);

        // Posicionar todos en casilla 0 al inicio
        moveCircle(P1, 0);
        if (n >= 2) moveCircle(P2, 0);
        if (n >= 3) moveCircle(P3, 0);
        if (n >= 4) moveCircle(P4, 0);
    }

    /** Inyectar gestor de partida */
    public void setGestorPartidas(gestorPartidas gp) {
        this.gestor = gp;
        drawBoard();
        setupActions();
    }

    /** Dibuja las casillas con su tipo (texto) */
    private void drawBoard() {
        tablero.getChildren().clear();
        List<Casilla> casillas = gestor.getTablero().getCasillas();
        int cols = 5;
        for (int i = 0; i < casillas.size(); i++) {
            int row = i / cols, col = i % cols;
            Casilla c = casillas.get(i);

            Label lbl = new Label();
            lbl.setMaxSize(Double.MAX_VALUE, Double.MAX_VALUE);
            lbl.setStyle("-fx-alignment: center; -fx-font-size: 12;");
            if (c instanceof Oso)      lbl.setText("Ós");
            else if (c instanceof Agujero)    lbl.setText("Forat");
            else if (c instanceof Trineo)     lbl.setText("Trineu");
            else if (c instanceof Interrogant)lbl.setText("?");
            else                              lbl.setText("");

            tablero.add(lbl, col, row);
        }
        // Reposicionar jugadores encima de las etiquetas
        setNumeroJugadores(this.numeroJugadores);
    }

    /** Conecta eventos de botones */
    private void setupActions() {
        btnTirarDado.setOnAction(e -> {
            gestor.jugarTurno();
            int idx = gestor.getTurnoActual();
            int pos = gestor.getJugadores().get(idx).getPosicion();
            // Mover círculo del jugador que acaba de jugar
            switch (idx) {
                case 0: moveCircle(P1, pos); break;
                case 1: moveCircle(P2, pos); break;
                case 2: moveCircle(P3, pos); break;
                case 3: moveCircle(P4, pos); break;
            }
            // Actualizar siguiente turno y texto
            currentPlayerIndex = (idx + 1) % numeroJugadores;
            eventos.setText("Turno de Jugador " + (currentPlayerIndex + 1));
        });

        btnBolaNieve.setOnAction(e -> {
            // Lógica de bola de nieve si la implementas en gestorPartidas
            // gestor.lanzarBola(targetIdx);
            // Luego reposicionar el círculo del jugador objetivo
        });
    }

    /** Mueve un Circle a la casilla indicada */
    private void moveCircle(Circle c, int casillaIndex) {
        int cols = 5;
        int row = casillaIndex / cols;
        int col = casillaIndex % cols;
        GridPane.setRowIndex(c, row);
        GridPane.setColumnIndex(c, col);
    }
}
